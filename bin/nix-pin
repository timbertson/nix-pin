#!/usr/bin/env python3

import os
import errno
import sys
import argparse
import json
import logging
import subprocess
from typing import List

ARCHIVE_EXT = '.tgz'
JSON_EXT = '.json'
DEFAULT_EXPR_PATH = 'default.nix'

class Paths(object):
	def __init__(self, home):
		assert home is not None, '--home required'
		assert os.path.exists(home), '%s does not exist' % (home)
		self.home = home
		self._config = os.path.join(home, '.config', 'nix-pin')
		self._cache = os.path.join(home, '.cache', 'nix-pin')

	@property
	def config(self): return self._ensure(self._config)

	@property
	def cache(self): return self._ensure(self._cache)

	@property
	def pins(self): return self._ensure(os.path.join(self._config, 'pins'))

	def _ensure(self, path):
		try:
			os.makedirs(path)
			logging.debug("Created %s", path)
		except OSError as e:
			if e.errno != errno.EEXIST:
				raise
		return path


def nix_of_string(s):
	#TODO: escaping
	return '"' + s + '"'

class LocalRepo(object):
	is_local = True
	def __init__(self, root):
		self.root = root

	def export(self, dest, revision, *, paths):
		subprocess.check_call(
			['git', 'archive', '--format=tgz', '--prefix=git-export/', '--output', dest, revision],
			cwd = self.repo_path(paths=paths))

	def repo_path(self, paths: Paths):
		return self.root.replace('~/', paths.home + '/')

	def validate(self, paths: Paths, pin: 'Pin'):
		p = os.path.join(self.repo_path(paths), pin.expr_path)
		assert os.path.exists(p), ("path does not exist: %s" % (p))

	def description(self, *, paths):
		return self.repo_path(paths=paths)

	def update_revision(self, spec, *, paths: Paths):
		def to_sha(bytes):
			return bytes.decode('ascii').strip()

		if spec is None:
			git_env = os.environ.copy()
			git_env.update({
				"GIT_AUTHOR_NAME": "nobody",
				"GIT_AUTHOR_EMAIL": "nobody@example.org",
				"GIT_AUTHOR_DATE": '1970-01-01T00:00:00Z',
				"GIT_COMMITTER_NAME": "nobody",
				"GIT_COMMITTER_EMAIL": "nobody@example.org",
				"GIT_COMMITTER_DATE": '1970-01-01T00:00:00Z',
			})
			root = self.repo_path(paths=paths)
			stash_rev = to_sha(subprocess.check_output(
				['git', 'stash', 'create'],
				cwd = root, env = git_env))
			if stash_rev:
				return stash_rev
			else:
				spec = 'HEAD'

		# spec must be set at this point
		return to_sha(subprocess.check_output(['git','rev-parse', spec], cwd=root))

class RemoteRepo(object):
	is_local = False
	def __init__(self, repo, ref):
		self.repo = repo
		self.ref = ref

class Repo(object):
	@staticmethod
	def from_attrs(attrs):
		root = attrs.get('root', None)
		if root is not None:
			return LocalRepo(root)
		else:
			return RemoteRepo(attrs['url'], attrs.get('branch', None))

class InvalidPin(RuntimeError):
	def __init__(self, pin, msg):
		self.pin = pin
		super(InvalidPin, self).__init__('Invalid pin: %s (%s)' % (pin, msg))

class Pin(object):
	def __init__(self, name, attrs):
		self.name = name
		self.attrs = attrs
		self.repo = Repo.from_attrs(attrs)

	def validate(self, paths: Paths):
		try:
			root = self.attr('root')
			if not (os.path.isabs(root) or root.startswith('~')):
				# path may need normalizing
				root = os.path.realpath(root)
				home_prefix = paths.home + '/'
				if root.startswith(home_prefix):
					self.setattr('root', '~/' + root[len(home_prefix):])
			assert 'revision' in self.attrs
			if 'path' in self.attrs:
				assert self.attr('path') is not None
			self.repo.validate(paths, self)
		except AssertionError as e:
			raise InvalidPin(self.name, str(e))

	@classmethod
	def from_json(cls, name, json):
		return cls(name, json)

	def to_json(self):
		return self.attrs

	def setattr(self, key, value):
		self.attrs[key] = value

	def attr(self, key):
		return self.attrs[key]

	def attr_or(self, key, dfl):
		return self.attrs.get(key, dfl)

	@staticmethod
	def json_path_for(name, paths):
		return os.path.join(paths.pins, name + JSON_EXT)

	def json_path(self, paths):
		return type(self).json_path_for(self.name, paths)

	@property
	def revision(self):
		return self.attr('revision')

	def _update_revision(self, old_rev, spec, paths: Paths):
		logging.info('Updating: %s ...' % (self.name,))
		new_rev = self.repo.update_revision(spec, paths=paths)
		if old_rev == new_rev:
			logging.info(" - %s unchanged (%s)" % (self.name, old_rev))
			return False
		else:
			if old_rev is None:
				logging.info(" - %s: init at %s" % (self.name, new_rev))
			else:
				logging.info(" - %s: updated to %s (from %s)" % (self.name, new_rev, old_rev))
			self.setattr('revision', new_rev)
			return True

	def update_revision(self, spec, paths: Paths):
		return self._update_revision(self.revision, spec, paths)

	def init_revision(self, spec, paths: Paths):
		return self._update_revision(None, spec, paths)

	@property
	def archive_filename(self):
		return self.name + '-' + self.revision + ARCHIVE_EXT

	@property
	def aliases(self):
		self.attr_or('aliases', [])

	def archive_path(self, *, paths, temp=False):
		filename = self.archive_filename
		if temp:
			filename = filename + '.tmp'
		return os.path.join(paths.cache, filename)

	@property
	def expr_path(self):
		return self.attr_or('path', DEFAULT_EXPR_PATH)

	def to_nix(self, *, paths):
		return '''
			rec {{
				src = {src};
				spec = lib.importJSON {jsonPath};
				attrs = spec.attrs or {{}};
				drv = importFromArchive src {drvPath};
			}}
		'''.format(
			src = self.archive_path(paths=paths),
			jsonPath = self.json_path(paths=paths),
			drvPath = nix_of_string(self.expr_path)
		)

	def save(self, paths: Paths):
		self.validate(paths)
		dest = self.json_path(paths=paths)
		tmp_dest = dest + '.tmp'
		with open(tmp_dest, 'w') as f:
			json.dump(self.to_json(), f, indent=2, separators=(',', ': '))
		os.rename(tmp_dest, dest)

	def populate_archive(self, *, paths, force=False):
		archive_path = self.archive_path(paths=paths)
		if os.path.exists(archive_path) and force is False:
			return False
		logging.info('Updating archive for %s@%s' % (self.name, self.revision))
		archive_tmp = self.archive_path(paths=paths, temp=True)
		self.repo.export(archive_tmp, self.revision, paths=paths)
		os.rename(archive_tmp, archive_path)

def _load_pin_at(*, pin_name, pin_path):
	try:
		with open(pin_path) as f:
			return Pin.from_json(pin_name, json.load(f))
	except RuntimeError as e:
		logging.error("Error loading %s: %s", pin_path, e)
		raise

def load_pin_for_opt(root, paths: Paths) -> Pin:
	all_pins = load_pins(paths)
	for pin in all_pins:
		if os.path.samefile(pin.repo.repo_path(paths), root):
			logging.debug('found pin %s for directory %s' % (pin.name, root))
			return pin
	return None

def load_pin_for(root, paths: Paths) -> Pin:
	pin = load_pin_for_opt(root, paths)
	assert pin is not None, "No pin found for %s" % (root)
	return pin

def load_pin(name, paths: Paths) -> Pin:
	pins_path = paths.pins
	pin_filename = name + JSON_EXT
	return _load_pin_at(pin_name=name, pin_path=os.path.join(pins_path, pin_filename))

def load_pins(paths) -> List[Pin]:
	pins_path = paths.pins
	pin_files = os.listdir(pins_path)

	pin_specs = []
	for pin_filename in sorted(pin_files):
		pin_name, ext = os.path.splitext(pin_filename)
		if ext != JSON_EXT:
			logging.debug("skipping %s", pin_filename)
			continue
		pin_path = os.path.join(pins_path, pin_filename)
		pin = _load_pin_at(pin_name=pin_name, pin_path=pin_path)
		pin_specs.append(pin)
	return pin_specs

def get_pin_expr(paths: Paths):
	return os.path.join(paths.config, 'pins.nix')

def setup(paths, args):
	if args is None:
		force = False
	else:
		force = args.force
	pin_specs = load_pins(paths=paths)

	# make sure we've got all the archives we need
	for pin in pin_specs:
		pin.populate_archive(paths=paths, force=force)
		pin.validate(paths)

	# now clean up old archives
	cleanup_archive_paths(paths=paths, specs=pin_specs)

	# now write the single nix file which imports all pins:
	pin_expr = get_pin_expr(paths)
	pin_expr_tmp = pin_expr + '.tmp'
	with open(pin_expr_tmp, 'w') as dest:
		dest.write('{ lib, importFromArchive }: {\n')
		for pin in pin_specs:
			dest.write('  \"%s\" = %s;\n' % (pin.name, pin.to_nix(paths=paths)))
		dest.write('}\n')
	os.rename(pin_expr_tmp, pin_expr)

def info(paths: Paths, args):
	pin_specs = load_pins(paths=paths)
	print("%s pin(s) configured" % len(pin_specs))
	for pin in pin_specs:
		print("  - %s: %s (%s#%s)" % (
			pin.name,
			pin.revision[:8],
			pin.repo.description(paths=paths),
			pin.expr_path
		))

def cleanup_archive_paths(*, paths, specs):
	expected_paths = set([pin.archive_filename for pin in specs])
	extant_paths = set(os.listdir(paths.cache))
	unexpected_paths = extant_paths.difference(expected_paths)
	for path in unexpected_paths:
		full_path = os.path.join(paths.cache, path)
		logging.info("removing cache path %s", full_path)
		os.unlink(full_path)

def update_single_pin(pin, revision, paths: Paths):
	if pin.update_revision(revision, paths=paths):
		pin.save(paths)
		setup(paths, None)

def update_action(paths, args):
	revision = args.revision
	changed = False
	pins = []
	if not args.pins:
		pins.append(load_pin_for(os.getcwd(), paths))
	else:
		for name in args.pins:
			if name == '.':
				pins.append(load_pin_for(os.getcwd(), paths))
			else:
				pins.append(load_pin(name, paths=paths))
	for pin in pins:
		if pin.update_revision(args.revision, paths=paths):
			pin.save(paths)
			changed = True

	if changed:
		setup(paths, None)

EDITABLE_KEYS = ['root', 'path']
def attrs_of_args(args):
	attrs = {}
	for key in EDITABLE_KEYS:
		val = getattr(args, key)
		if val is not None:
			attrs[key] = val
	return attrs

def create_action(paths, args):
	assert args.name, "pin name required"
	attrs = attrs_of_args(args)
	pin = Pin(args.name, attrs)
	pin.init_revision(spec=None, paths=paths)
	pin.save(paths)
	logging.info("Created: %r" % attrs)
	setup(paths, args=None)

def edit_action(paths, args):
	assert args.name, "pin name required"
	pin = load_pin(args.name, paths=paths)

	modified = False
	if args.delete:
		os.path.unlink(pin.json_path(paths))
	elif args.rename is not None:
		pin.name = args.rename
		pin.save(paths)
	else:
		attrs = attrs_of_args(args)
		if attrs:
			for key, value in attrs.items():
				pin.setattr(key, value)
			pin.save(paths)
			logging.info("Updated: %r" % attrs)
		else:
			logging.warn("Nothing changed")
			return

	setup(paths, args=None)

def run_action(cmd):
	def run(paths: Paths, args):
		def realpath_opt(path):
			if path is None:
				return None
			return os.path.realpath(path)

		info(paths, args)
		build_args = {
			'buildPath': realpath_opt(args.path),
			'buildPin': args.pin
		}
		args_set = len(list(filter(lambda x: x is not None, build_args.values())))
		assert args_set <= 1, "Too many build arguments provided"
		do_update = args.update
		if do_update is None:
			do_update = cmd == 'nix-build'

		if args_set == 0:
			# derive either buildPath or buildPin from cwd:
			cwd = os.getcwd()
			pin = load_pin_for_opt(cwd, paths)
			if pin is not None:
				build_args['buildPin'] = pin.name
			else:
				# not a registered pin path, look for a default expression to build
				candidates = ['default.nix']
				if cmd == 'nix-shell':
					candidates = ['pin.nix', 'shell.nix'] + candidates

				for candidate in candidates:
					if os.path.exists(candidate):
						build_args['buildPath'] = realpath_opt(candidate)
						break
				else:
					raise RuntimeError("Could not find any of %r in %s" % (candidates, cwd))

		if do_update:
			pin_name = build_args['buildPin']
			if pin_name is not None:
				logging.info("Updating %s" % (pin_name,))
				pin = load_pin(pin_name, paths)
				update_single_pin(pin, revision = args.revision, paths = paths)

		pin_args = [ '--argstr', 'pinConfig', get_pin_expr(paths) ]
		for k, v in build_args.items():
			if v is None:
				pin_args.extend(['--arg', k, 'null'])
			else:
				assert isinstance(v, str), "%r is not a string" % (v,)
				pin_args.extend(['--argstr', k, v])

		here = os.path.dirname(__file__)
		package_root = os.path.dirname(here)
		run_path = os.path.join(package_root, 'share', 'nix', 'call.nix')
		argv = pin_args + args.unknown_args + [run_path]
		if cmd is not None:
			argv = [cmd] + argv
		logging.debug(' + %s' % (' '.join(argv)))
		os.execvp(argv[0], argv)
	run.allow_unknown_args = True
	return run

def default_action(*, paths, args):
	setup(paths, args=None)
	info(paths, args=None)

def main():
	logging.basicConfig(level=logging.DEBUG)
	p = argparse.ArgumentParser(allow_abbrev=False)
	default_home = os.environ.get('HOME', None)
	p.set_defaults(func=default_action, home=default_home)
	p_sub = p.add_subparsers()

	p_common = argparse.ArgumentParser(add_help=False)
	p_common.add_argument('--home')
	p_common.set_defaults(home=default_home)

	p_run_common = argparse.ArgumentParser(add_help=False)
	p_run_common.add_argument('--path')
	p_run_common.add_argument('--pin')
	p_run_common.add_argument('--update', action='store_true', default=None)
	p_run_common.add_argument('--no-update', dest='update', action='store_false', help="Don't update pin before building")
	p_run_common.add_argument('--revision', help="Set revision to update to (for --pin, unless --no-update is given)")

	p_populate = p_sub.add_parser('setup', parents=[p_common])
	p_populate.add_argument('--force', action='store_true')
	p_populate.set_defaults(func=setup)

	p_create = p_sub.add_parser('create', parents=[p_common])
	p_create.add_argument('name')
	p_create.add_argument('root')
	p_create.add_argument('-p', '--path')
	p_create.set_defaults(func=create_action)

	p_update = p_sub.add_parser('update', parents=[p_common])
	p_update.add_argument('pins', nargs='*')
	p_update.add_argument('-r', '--revision')
	p_update.set_defaults(func=update_action)

	p_shell = p_sub.add_parser('shell', parents=[p_common, p_run_common])
	p_shell.set_defaults(func=run_action('nix-shell'))

	p_build = p_sub.add_parser('build', parents=[p_common, p_run_common])
	p_build.set_defaults(func=run_action('nix-build'))

	p_exec = p_sub.add_parser('exec', parents=[p_common, p_run_common])
	p_exec.set_defaults(func=run_action(None))

	p_info = p_sub.add_parser('status', parents=[p_common])
	p_info.set_defaults(func=info)

	p_edit = p_sub.add_parser('edit', parents=[p_common])
	p_edit.set_defaults(func=edit_action)
	p_edit.add_argument('name')
	p_edit.add_argument('--root')
	p_edit.add_argument('--path')
	p_edit.add_argument('--delete', action='store_true')
	p_edit.add_argument('--rename')

	try:
		args, unknown_args = p.parse_known_args()
		allow_unknown_args = getattr(args.func, 'allow_unknown_args', False)
		if unknown_args and not allow_unknown_args:
			# re-parse to throw
			args = p.parse_args()
			assert False
		args.unknown_args = unknown_args
		# kwargs = {}
		# if allow_unknown_args:
		# 	kwargs['unknown_args'] = unknown_args
		paths = Paths(args.home)
		args.func(paths=paths, args=args)
	except InvalidPin as e:
		print(str(e), file=sys.stderr)
		sys.exit(1)

if __name__ == '__main__':
	main()
